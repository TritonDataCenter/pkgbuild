#
# Additional settings for the '2016Q3-tools' bulk build.
#

BRANCH=			2016Q3
PKGBUILD?=		2016Q3-tools
PKGBUILD_BASEDIR?=	/data/pkgbuild
TOOLS_BASEDIR?=		/opt/local

#
# ============================================================================
# Default options which are shared across all builds, including upstream and
# non-Joyent packages.  This section should not contain anything which might
# hide issues we would want to fix upstream.
# ============================================================================
#
DISTDIR=		/data/distfiles
PACKAGES=		/data/packages/SmartOS/2016Q3/tools
WRKOBJDIR=		/home/pbulk/build
#
.if !make(distinfo) && !make(mdi) && !make(makedistinfo)
FAILOVER_FETCH=		yes
.endif

#
# General pkgsrc variables mostly set on a per-pkgbuild basis.
#
ALLOW_VULNERABLE_PACKAGES=	yes
CFLAGS=				-pipe -O2
FETCH_USING=			curl
INSTALL_UNSTRIPPED=		yes
MANZ=				yes
NO_PKGTOOLS_REQD_CHECK=		yes
PBULK_CACHE_DIRECTORY=		/var/tmp
PKGGNUDIR=
PKGINSTALL_IGNORE_UIDGID=	yes
PKGSRC_KEEP_BIN_PKGS=		no
PKGSRC_RUN_TEST=		no
PKGSRC_USE_SSP=			strong
PKG_DEVELOPER=			yes
PKG_REGISTER_SHELLS=		yes
SHCOMMENT=			:
SKIP_LICENSE_CHECK=		yes
USE_CWRAPPERS=			yes

#
# Enable additional PKG_DEVELOPER checks.  CHECK_WRKREF_EXTRA_DIRS is only
# activated if CHECK_WRKREF contains "extra".
#
CHECK_SHLIBS_BLACKLIST=		^/usr/sfw
CHECK_SHLIBS_BLACKLIST+=	^/(lib|usr/lib)(/(32|64|amd64))?/lib(curses|termcap|xml2|z).so
CHECK_SHLIBS_BLACKLIST+=	^/usr/lib(/(32|64|amd64))?(gcc_s|stdc..).so
CHECK_WRKREF=			tools home
CHECK_WRKREF_EXTRA_DIRS=

#
# List of per-PKGPATH MAKE_JOBS definitions.  These are the packages that
# benefit most from having a larger -jN than the default as they are heavily
# depended upon, or are long builds near the end of the run.
#
#PKG_MAKE_JOBS.cat/pkg=	2
#
# Use a PKGPATH-based definition or the default
#
MAKE_JOBS_DEFAULT=	8
MAKE_JOBS=		${PKG_MAKE_JOBS.${PKGPATH}:U${MAKE_JOBS_DEFAULT}}

#
# SmartOS GCC settings.  Skip for Linux/OSX builds.
#
.if empty(PKGBUILD:Mlinux-*) && empty(PKGBUILD:Mel[67]-*) && empty(PKGBUILD:Mosx-*)
#
# Whether to depend upon the GCC runtime from the current build.  Generally
# this should be set when binaries are distributed, otherwise they will depend
# upon the GCC runtime from the tools.
#
USE_PKGSRC_GCC_RUNTIME=	yes
#
# If enabled GCC will enable --with-local-prefix=${LOCALBASE}, otherwise it
# will use the default of GCC_PREFIX.  This is required to be disabled for
# the "tools" build so that bad includes don't leak into a non-tools build.
#
USE_GCC_LOCALBASE_PREFIX=	no
#
# Try to avoid requiring clang for GNUstep
#
.  if !empty(PKGBUILD:Mupstream-*)
PKG_OPTIONS.gnustep+=	fragile
.  endif
#
# Use in-tree GCC except on older branches and upstream builds.  Upstream
# builds cannot use in-tree yet as there's no way to build binutils using
# an external libtool without patches at this time.
#
.  if empty(PKGBUILD:Mupstream*)
#
# Use external GCC for GCC itself and its dependencies, otherwise we run into
# circular dependencies.
#
.    if !empty(PKGPATH:Mdevel/binutils) \
     || !empty(PKGPATH:Mdevel/gmake) \
     || !empty(PKGPATH:Mdevel/nbpatch) \
     || !empty(PKGPATH:Mlang/gcc2) \
     || !empty(PKGPATH:Mlang/gcc3*) \
     || !empty(PKGPATH:Mlang/gcc??) \
     || !empty(PKGPATH:Mmisc/root) \
     || !empty(PKGPATH:Mpkgtools/abiexec) \
     || !empty(PKGPATH:Mpkgtools/cwrappers) \
     || !empty(PKGPATH:Mpkgtools/digest) \
     || !empty(PKGPATH:Mpkgtools/isaexec) \
     || !empty(PKGPATH:Mpkgtools/pkg_install-info) \
     || !empty(PKGPATH:Msysutils/checkperms)
GCCBASE=		/opt/local/gcc49
.    else
GCC_REQD=		4.9
USE_PKGSRC_GCC=		yes
.    endif
.  endif
.endif # !Linux && !OSX

#
# ============================================================================
# Any additional per-config custom configuration.
# ============================================================================
#
.include "${PKGBUILD_BASEDIR}/include/exttools.mk"
.include "${PKGBUILD_BASEDIR}/include/gcc-libs.mk"
.include "${PKGBUILD_BASEDIR}/include/gz.mk"
.include "${PKGBUILD_BASEDIR}/include/hacks.mk"
.include "${PKGBUILD_BASEDIR}/include/libumem.mk"
.include "${PKGBUILD_BASEDIR}/include/meta-files.mk"
.include "${PKGBUILD_BASEDIR}/include/pkgfail.mk"
.include "${PKGBUILD_BASEDIR}/include/pkgoptions.mk"
.include "${PKGBUILD_BASEDIR}/include/project.mk"
.include "${PKGBUILD_BASEDIR}/include/smf.mk"

#
# Optional user overrides
#
.sinclude "${PKGBUILD_BASEDIR}/conf/${PKGBUILD}/mk.conf.local"
