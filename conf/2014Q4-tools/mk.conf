#
# Additional settings for the '2014Q4-tools' bulk build.
#

BRANCH=			2014Q4
PKGBUILD=		2014Q4-tools
PKGBUILD_BASEDIR=	/shared/pkgbuild

#
# ============================================================================
# Default options which are shared across all builds, including upstream and
# non-Joyent packages.  This section should not contain anything which might
# hide issues we would want to fix upstream.
# ============================================================================
#
DISTDIR=		/shared/distfiles
PACKAGES=		/shared/packages/SmartOS/2014Q4/tools
WRKOBJDIR=		/home/pbulk/build
#
FAILOVER_FETCH=		yes
FETCH_USING=		curl
#
PKG_DEVELOPER=		yes
#
# Additional PKG_DEVELOPER checks.
#
CHECK_WRKREF=			tools home
CHECK_WRKREF_EXTRA_DIRS=
#
ALLOW_VULNERABLE_PACKAGES=	yes
SKIP_LICENSE_CHECK=		yes
#
PKGSRC_RUN_TEST=		no
#
# Use binutils from external tools which are not provided by the platform.
#
.for tool in as objcopy objdump ranlib readelf
TOOLS_PATH.${tool}=	/opt/local/bin/g${tool}
TOOLS_CREATE+=		${tool}
.endfor
#
# Avoid circular dependencies by using external tools for gcc, where the tool
# itself depends upon gcc when using USE_PKGSRC_GCC_RUNTIME.
#
.if !empty(PKGPATH:Mlang/gcc*)
TOOLS_PLATFORM.makeinfo=/opt/local/bin/makeinfo
TOOLS_PLATFORM.perl=	/opt/local/bin/perl
.endif
#
# We need to ensure that libtool can be built with the pkgsrc gcc so that the
# correct library paths are encoded, and to do that we need to build binutils
# (a gcc dependency) with an external libtool.   XXX: requires pkgsrc patch.
#
.if !empty(PKGPATH:Mdevel/binutils)
PKG_LIBTOOL=		/opt/local/bin/libtool
PKG_SHLIBTOOL=		/opt/local/bin/shlibtool
.endif
#
# Default MAKE_JOBS class.
#
MAKE_JOBS=		2
#
# Certain packages are highly depended upon and/or are large parallel builds.
# In order to avoid the build stalling whilst waiting for them to finish, we
# give them a priority MAKE_JOBS class to speed them up.
#
#  - Priority 1 for general packages which need a speed increase.
#
PRIO1PKGS+=		devel/libthrift
PRIO1PKGS+=		devel/qtscriptgenerator
PRIO1PKGS+=		devel/xulrunner*
PRIO1PKGS+=		editors/kate
PRIO1PKGS+=		lang/clang
PRIO1PKGS+=		lang/mercury
PRIO1PKGS+=		lang/openjdk7
PRIO1PKGS+=		lang/perl5
PRIO1PKGS+=		mail/evolution
PRIO1PKGS+=		mail/thunderbird*
PRIO1PKGS+=		wip/oce
PRIO1PKGS+=		www/firefox*
PRIO1PKGS+=		*/*kde*
PRIO1PKGS+=		x11/py-qt4
PRIO1PKGS+=		x11/qt[345]-*
#
#  - Priority 2 currently just for webkit which currently takes 4 hours to
#    build at priority 1.  We want to speed it up but don't want to give it
#    priority 3 to avoid too much build host contention.
#
PRIO2PKGS+=		www/webkit*
#
#  - Priority 3 for packages which can cause the build to become single
#    threaded, e.g. gcc47 which is used by everything, and KDE packages which
#    are built towards the end of the run so we can afford the additional jobs
#    as there will be less load on the build hosts at that time.
#
PRIO3PKGS+=		devel/cmake
PRIO3PKGS+=		finance/gnucash
PRIO3PKGS+=		lang/gcc47
PRIO3PKGS+=		lang/gcc49
PRIO3PKGS+=		lang/perl5
PRIO3PKGS+=		misc/kdeplasma-addons4
PRIO3PKGS+=		misc/kdepim3
PRIO3PKGS+=		misc/kdepimlibs4
PRIO3PKGS+=		misc/marble
PRIO3PKGS+=		multimedia/kdemultimedia3
PRIO3PKGS+=		net/kdenetwork3
PRIO3PKGS+=		security/openssl
PRIO3PKGS+=		sysutils/strigi
PRIO3PKGS+=		textproc/soprano
PRIO3PKGS+=		x11/kdebase3
PRIO3PKGS+=		x11/kdelibs[34]
PRIO3PKGS+=		x11/kde-runtime4
PRIO3PKGS+=		x11/kde-workspace4
PRIO3PKGS+=		x11/qt4-libs
PRIO3PKGS+=		x11/qt4-tools
#
.for prio1pkg in ${PRIO1PKGS}
.  if !empty(PKGPATH:M${prio1pkg})
MAKE_JOBS=		4
.  endif
.endfor
.for prio2pkg in ${PRIO2PKGS}
.  if !empty(PKGPATH:M${prio2pkg})
MAKE_JOBS=		6
.  endif
.endfor
.for prio3pkg in ${PRIO3PKGS}
.  if !empty(PKGPATH:M${prio3pkg})
MAKE_JOBS=		8
.  endif
.endfor
#
# Try to avoid requiring clang for GNUstep
#
.if !empty(PKGBUILD:Mupstream-*)
PKG_OPTIONS.gnustep+=	fragile
.endif
#
# Always pull in nbpatch as a bootstrap dependency.  This allows us to enable
# the pbulk reuse_scan_results option, as without doing this pbulk will fail
# if a package adds patches where previously it didn't have any due to the
# missing dependency on nbpatch.
#
.if !empty(PKGBUILD:Mupstream-*) \
 || !empty(PKGBUILD:Mtrunk-*) \
 || !empty(PKGBUILD:M2014Q[34]-*) \
 || !empty(PKGBUILD:M201[5-9]Q[1-4]-*)
TOOLS_PLATFORM.patch=   /opt/local/bin/nbpatch
.else
.  if empty(PKGPATH:Mdevel/nbpatch)
BOOTSTRAP_DEPENDS+=	nbpatch-[0-9]*:../../devel/nbpatch
.  endif
.endif
#
# Whether to depend upon the GCC runtime from the current build.  Generally
# this should be set when binaries are distributed, otherwise they will depend
# upon the GCC runtime from the tools.
#
USE_PKGSRC_GCC_RUNTIME=	yes
#
# Use in-tree GCC except on older branches and upstream builds.  Upstream
# builds cannot use in-tree yet as there's no way to build binutils using
# an external libtool without patches at this time.
#
.if empty(PKGBUILD:M2013Q1-*) \
 && empty(PKGBUILD:M201[012]*) \
 && empty(PKGBUILD:Mupstream*)
#
# Use external GCC for GCC itself and its dependencies, otherwise we run into
# circular dependencies.
#
.  if !empty(PKGPATH:Mdevel/binutils) \
   || !empty(PKGPATH:Mdevel/gmake) \
   || !empty(PKGPATH:Mdevel/nbpatch) \
   || !empty(PKGPATH:Mlang/gcc2) \
   || !empty(PKGPATH:Mlang/gcc3*) \
   || !empty(PKGPATH:Mlang/gcc??) \
   || !empty(PKGPATH:Mmisc/root) \
   || !empty(PKGPATH:Mpkgtools/abiexec) \
   || !empty(PKGPATH:Mpkgtools/cwrappers) \
   || !empty(PKGPATH:Mpkgtools/digest) \
   || !empty(PKGPATH:Mpkgtools/isaexec) \
   || !empty(PKGPATH:Mpkgtools/pkg_install) \
   || !empty(PKGPATH:Mpkgtools/pkg_install-info) \
   || !empty(PKGPATH:Msysutils/checkperms)
GCCBASE=		/opt/local/gcc47
.  else
GCC_REQD=		4.7
USE_PKGSRC_GCC=		yes
.  endif
.endif
#
# Enable cwrappers on supported branches.
#
USE_CWRAPPERS=		yes


#
# ============================================================================
# This section contains mostly Joyent-specific configuration.
# ============================================================================
#
# Skip this entire section for clean upstream builds
#
.if empty(PKGBUILD:Mupstream-*)
#
# We want GNU tools to be default.
#
PKGGNUDIR=		# empty
#
# Make user creation non-fatal
#
PKGINSTALL_IGNORE_UIDGID=	yes
#
# Register shells in /etc/shell at package installation time
#
PKG_REGISTER_SHELLS=	yes
#
# Increase default optimisation.
#
CFLAGS+=		-pipe -O2
#
# Don't strip binaries with install(1).
#
INSTALL_UNSTRIPPED=	yes
#
# Whether to sign packages.
#
SIGN_PACKAGES=
#
# Add -lumem by default, except for packages where it causes issues.
#
.if empty(PKGPATH:Mdevel/ncurses) \
 && empty(PKGPATH:Meditors/emacs*) \
 && empty(PKGPATH:Mjoyent/haskell-platform) \
 && empty(PKGPATH:Mlang/ghc*) \
 && empty(PKGPATH:Mlang/go) \
 && empty(PKGPATH:M*/hs-*) \
 && empty(PKGPATH:Msecurity/aide) \
 && empty(PKGPATH:Mwip/ghc)
.  if !empty(PKGBUILD:M2013Q1-*) \
   || !empty(PKGBUILD:M201[012]*)
LIBS+=			-lumem
.  else
_WRAP_EXTRA_LIBS.CC+=	-lumem
_WRAP_EXTRA_LIBS.CXX+=	-lumem
_WRAP_EXTRA_LIBS.LD+=	-lumem
CWRAPPERS_LDADD.cc+=	-lumem
CWRAPPERS_LDADD.cxx+=	-lumem
CWRAPPERS_LDADD.ld+=	-lumem
.  endif
.endif
#
# Default is PREFER_PKGSRC, override some specifics.
#
PREFER_NATIVE=
#
# Pull in override INSTALL files.
#
.if exists(/shared/pkgbuild/meta/${PKGPATH}/INSTALL)
INSTALL_TEMPLATES+=	/shared/pkgbuild/meta/${PKGPATH}/INSTALL
.endif
#
# Pull in logadm INSTALL files (to be removed when logadm support is
# added into pkgsrc
#
.if exists(/shared/pkgbuild/meta/${PKGPATH}/INSTALL.logadm)
INSTALL_TEMPLATES+=	/shared/pkgbuild/meta/${PKGPATH}/INSTALL.logadm
.endif
#
# Include files which contain large, self-contained configuration areas.
#
.include "/shared/pkgbuild/include/pkgoptions.mk"
.include "/shared/pkgbuild/include/pkgfail.mk"
.include "/shared/pkgbuild/include/project.mk"
.include "/shared/pkgbuild/include/smf.mk"
.include "/shared/pkgbuild/include/users.mk"
#
# SMF source files. XXX: only used by 2013Q4 and older.
#
SMFBASE=		/shared/pkgbuild/meta
.endif


#
# ============================================================================
# Any additional per-config custom configuration.
# ============================================================================
#

