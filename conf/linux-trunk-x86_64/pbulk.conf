# $NetBSD: pbulk.conf,v 1.18 2012/11/23 12:13:34 joerg Exp $

# Sanitise PATH, we cannot rely on the environment.
#
PATH=/sbin:/bin:/usr/sbin:/usr/bin

# Limit processes to an hour of CPU time.  Anything using this much is most
# likely broken.
#
ulimit -t 3600

# Version of the configuration file. This is bumped whenever the default
# config changes to notify the administrator about updates.
#
config_version=0.51

# If set, ensure that the build host is running this exact platform.
#
pi_required=

# The URL where the build report will be made available. This is only
# used in the .txt version of the report.
#
base_url=http://us-east.manta.joyent.com/mantauser/public/reports/Linux/trunk/x86_64

# If yes, keep the last scan results in ${bulklog}.orig and try to reuse them.
#
reuse_scan_results=yes

# The pbulk framework can use multiple machines to build the packages.
# On a single-processor, non-distributed build, you may want to say "no"
# here.
#
master_mode=yes
master_ip="127.0.0.1"
scan_clients=""
build_clients=""

master_port_scan=${master_ip}:2001
master_port_build=${master_ip}:2002

# Manta upload settings
#
MANTA_USER="mantauser"
MANTA_KEY_ID=""
MANTA_URL="https://us-east.manta.joyent.com"
MANTA_PATH=""

# Some flags for the programs that publish the binary packages and the
# build report. If you want to disable the publishing at all, see below.
#
#pkg_rsync_args="-av  -e ssh"
#pkg_rsync_target="pkgsrc.example.com:/www/pkgsrc.joyent.com/packages/Linux/trunk/x86_64"
#report_rsync_args="-avz --delete-excluded -e ssh"
#report_rsync_target="pkgsrc.example.com:/www/pkgsrc.example.com/reports/Linux/trunk/x86_64"
#report_manta_target="/mantauser/public/reports/Linux/trunk/x86_64"
report_subject_prefix="pkgsrc-linux-trunk-x86_64"
report_recipients="root"

# Chroot configuration
#
chroot_create=/data/pkgbuild/scripts/mksandbox-linux
chroot_delete=/data/pkgbuild/scripts/rmsandbox-linux
chroot_dir=/data/chroot/pkgsrc-linux-trunk-x86_64
build_chroots=4
scan_chroots=8

# An archive containing the pkgsrc binary tree after bootstrapping.
#
bootstrapkit=/data/packages/bootstrap-pbulk/bootstrap-trunk-x86_64.tar.gz

# Optionally build a subset of the available packages and their dependencies.
# The file is a newline separated list of package locations (e.g. lang/perl5).
#
#limited_list=

# Optionally ignore unresolvable dependencies for a full build (e.g.
# a build without limited_list set).  Default behavior is to bail out.
#
ignore_missing_dependencies=no

# If yes, consider a package up-to-date, if the dependency list matches
# the existing binary package and the recorded RCS IDs match the pkgsrc
# tree. Otherwise, additionally require that the package is not older
# than any of the dependencies.
#
skip_age_check=no

report_graph_script_limit=512

# Account used for user-destdir builds. This account should have
# no special permissions.
#
unprivileged_user=pbulk

# Variables used for the optional cross-compiling of packages.
#
cross_compile=no
target_arch=vax
target_destdir=/usr/src/destdir.${target_arch}

# The directories where the various files are created.
#
bulklog=/data/bulklog/trunk/x86_64
local_bulklog=/tmp/bulklog
packages=/data/packages/Linux/trunk/x86_64
prefix=/usr/pkg
pkgsrc=/data/pkgsrc-linux-trunk-x86_64
pkgdb=/usr/pkg/.pkgdb
varbase=/var

# The following programs must NOT be inside ${prefix}
pkg_info=/usr/pbulk/sbin/pkg_info
pkg_add=/usr/pbulk/sbin/pkg_add
pkg_delete=/usr/pbulk/sbin/pkg_delete

# The tools that are used for building the packages. If you do not want
# to publish anything at all, set rsync=: and mail=:.
#
bzip2=/usr/bin/bzip2
digest=/usr/pbulk/bin/digest
gzip="/usr/bin/gzip -nf -9"
# On non-NetBSD, this should usually point at the bmake in ${prefix}, not the
# make used to build pbulk itself.
make=${prefix}/bin/bmake
mail=/data/pkgbuild/conf/linux-trunk-x86_64/mail-report
neato=/usr/pbulk/bin/neato
rsync=/usr/pbulk/bin/rsync
sed=/usr/pbulk/bin/nbsed
tar=/bin/tar

loc=${bulklog}/meta

pbuild=/usr/pbulk/bin/pbulk-build
presolve=/usr/pbulk/bin/pbulk-resolve
pscan=/usr/pbulk/bin/pbulk-scan

# When a package build fails, it is often necessary to have a look at
# the working directory or the installed files. When these options are
# set to "yes", they will be archived in the log directory.
#
keep_wrkdir=no
keep_prefix=no

chroot_script=/usr/pbulk/libexec/pbulk/chroot
pkg_up_to_date_script=/usr/pbulk/libexec/pbulk/pkg-up-to-date
pbuild_script=/usr/pbulk/libexec/pbulk/pkg-build
pbuild_start_script=/usr/pbulk/libexec/pbulk/build-client-start
pscan_prepare=/usr/pbulk/libexec/pbulk/client-clean
pscan_start_script=/usr/pbulk/libexec/pbulk/scan-client-start
report_script=/usr/pbulk/libexec/pbulk/create-report
report_html_script=/usr/pbulk/libexec/pbulk/create-report-html
report_txt_script=/usr/pbulk/libexec/pbulk/create-report-txt
report_graph_script=/usr/pbulk/libexec/pbulk/create-broken-graph
packages_script=/usr/pbulk/libexec/pbulk/compute-packages

script_phase_pre_build=/usr/pbulk/libexec/pbulk/pre-build
script_phase_build=/usr/pbulk/libexec/pbulk/build
script_phase_report=/usr/pbulk/libexec/pbulk/report
script_phase_scan=/usr/pbulk/libexec/pbulk/scan
script_phase_upload=/usr/pbulk/libexec/pbulk/upload
