#
# Additional settings for the '2014Q4-multiarch' bulk build.
#

BRANCH=			2014Q4
PKGBUILD?=		2014Q4-multiarch
PKGBUILD_BASEDIR?=	/data/pkgbuild
TOOLS_BASEDIR?=		/opt/tools

#
# ============================================================================
# Default options which are shared across all builds, including upstream and
# non-Joyent packages.  This section should not contain anything which might
# hide issues we would want to fix upstream.
# ============================================================================
#
DISTDIR=		/data/distfiles
PACKAGES=		/data/packages/SmartOS/2014Q4/multiarch
WRKOBJDIR=		/home/pbulk/build
#
.if !make(distinfo) && !make(mdi) && !make(makedistinfo)
FAILOVER_FETCH=		yes
.endif
FETCH_USING=		curl
#
ALLOW_VULNERABLE_PACKAGES=	yes
PKGSRC_KEEP_BIN_PKGS=		no
SKIP_LICENSE_CHECK=		yes

#
# Always enable PKG_DEVELOPER rather than distributing broken packages.  Some
# branches enable additional checks.
#
PKG_DEVELOPER=		yes
#
CHECK_WRKREF=			tools home
CHECK_WRKREF_EXTRA_DIRS=	/opt/tools
#
PKGSRC_RUN_TEST=	no

#
# Enable cwrappers on supported branches.
#
USE_CWRAPPERS=		yes
#
# Whether to PGP sign packages.
#
SIGN_PACKAGES=
#
# Default for most branches is PREFER_PKGSRC, if necessary override some
# specifics.  PREFER_NATIVE=yes is effectively ignored and here only to
# provide the option to override it.
#
PREFER_NATIVE=		yes
#
# This defaults to 'echo >/dev/null' which is at best pointless, and in some
# cases actively harmful (e.g. OSX mount_devfs occasionally loses /dev/null)
#
SHCOMMENT=		:
#
# Package compression type.
#
PKG_COMPRESSION=	gzip
#
# Manual page compression.  This isn't a yes/no variable, the feature is
# enabled if the variable is defined.
#
#MANZ=
#
# PKG_OPTIONS cache directory.
#
PBULK_CACHE_DIRECTORY=	/data/bulklog/2014Q4/multiarch/cache

#
# List of per-PKGPATH MAKE_JOBS definitions.  These are the packages that
# benefit most from having a larger -jN than the default as they are heavily
# depended upon, or are long builds near the end of the run.
#
PKG_MAKE_JOBS.archivers/xz=			2
PKG_MAKE_JOBS.audio/arts=			2
PKG_MAKE_JOBS.audio/pulseaudio=			2
PKG_MAKE_JOBS.cad/ghdl=				2
PKG_MAKE_JOBS.chat/psi=				2
PKG_MAKE_JOBS.converters/libiconv=		2
PKG_MAKE_JOBS.databases/mongodb=		2
PKG_MAKE_JOBS.databases/mysql-workbench=	2
PKG_MAKE_JOBS.databases/pgadmin3=		2
PKG_MAKE_JOBS.devel/boost-libs=			2
PKG_MAKE_JOBS.devel/cmake=			2
PKG_MAKE_JOBS.devel/gettext-lib=		2
PKG_MAKE_JOBS.devel/gettext-tools=		2
PKG_MAKE_JOBS.devel/gmp=			2
PKG_MAKE_JOBS.devel/gtexinfo=			2
PKG_MAKE_JOBS.devel/kdevelop4=			2
PKG_MAKE_JOBS.devel/kdevplatform=		2
PKG_MAKE_JOBS.devel/pango=			2
PKG_MAKE_JOBS.devel/qtscriptgenerator=		2
PKG_MAKE_JOBS.editors/emacs24=			2
PKG_MAKE_JOBS.editors/lyx=			2
PKG_MAKE_JOBS.finance/kmymoney2=		2
PKG_MAKE_JOBS.games/libkdegames=		2
PKG_MAKE_JOBS.games/libkmahjongg=		2
PKG_MAKE_JOBS.graphics/MesaLib=			2
PKG_MAKE_JOBS.graphics/cairo=			2
PKG_MAKE_JOBS.graphics/cairo-gobject=		2
PKG_MAKE_JOBS.graphics/glu=			2
PKG_MAKE_JOBS.joyent/rust=			2
PKG_MAKE_JOBS.joyent/rust111=			2
PKG_MAKE_JOBS.joyent/rust114=			2
PKG_MAKE_JOBS.joyent/rust18=			2
PKG_MAKE_JOBS.lang/clang=			2
PKG_MAKE_JOBS.lang/gawk=			2
PKG_MAKE_JOBS.lang/gcc47=			2
PKG_MAKE_JOBS.lang/gcc48=			2
PKG_MAKE_JOBS.lang/gcc49=			2
PKG_MAKE_JOBS.lang/libLLVM=			2
PKG_MAKE_JOBS.lang/llvm=			2
PKG_MAKE_JOBS.lang/mercury=			2
PKG_MAKE_JOBS.lang/openjdk7=			2
PKG_MAKE_JOBS.lang/perl5=			2
PKG_MAKE_JOBS.lang/rust=			2
PKG_MAKE_JOBS.math/mpfr=			2
PKG_MAKE_JOBS.math/octave=			2
PKG_MAKE_JOBS.misc/kdeaddons3=			2
PKG_MAKE_JOBS.misc/kdepim3=			2
PKG_MAKE_JOBS.misc/kdepimlibs4=			2
PKG_MAKE_JOBS.misc/libkdeedu=			2
PKG_MAKE_JOBS.misc/marble=			2
PKG_MAKE_JOBS.pkgtools/cwrappers=		2
PKG_MAKE_JOBS.security/fwbuilder=		2
PKG_MAKE_JOBS.security/libgcrypt=		2
PKG_MAKE_JOBS.security/libgpg-error=		2
PKG_MAKE_JOBS.security/qca2=			2
PKG_MAKE_JOBS.sysutils/baloo=			2
PKG_MAKE_JOBS.sysutils/libbaloo4=		2
PKG_MAKE_JOBS.sysutils/strigi=			2
PKG_MAKE_JOBS.textproc/libxslt=			2
PKG_MAKE_JOBS.www/shibboleth-sp=		2
PKG_MAKE_JOBS.www/webkit-gtk=			2
PKG_MAKE_JOBS.www/webkit1-gtk=			2
PKG_MAKE_JOBS.www/webkit1-gtk3=			2
PKG_MAKE_JOBS.www/webkit24-gtk=			2
PKG_MAKE_JOBS.www/webkit24-gtk3=		2
PKG_MAKE_JOBS.x11/gtk2=				2
PKG_MAKE_JOBS.x11/gtk3=				2
PKG_MAKE_JOBS.x11/kde-baseapps4=		2
PKG_MAKE_JOBS.x11/kde-runtime4=			2
PKG_MAKE_JOBS.x11/kde-workspace4=		2
PKG_MAKE_JOBS.x11/kdebase3=			2
PKG_MAKE_JOBS.x11/kdelibs3=			2
PKG_MAKE_JOBS.x11/kdelibs4=			2
PKG_MAKE_JOBS.x11/libX11=			2
PKG_MAKE_JOBS.x11/libXext=			2
PKG_MAKE_JOBS.x11/libXxf86vm=			2
PKG_MAKE_JOBS.x11/libkactivities4=		2
PKG_MAKE_JOBS.x11/libxcb=			2
PKG_MAKE_JOBS.x11/py-kde4=			2
PKG_MAKE_JOBS.x11/qt3-libs=			2
PKG_MAKE_JOBS.x11/qt3-tools=			2
PKG_MAKE_JOBS.x11/qt4-libs=			2
PKG_MAKE_JOBS.x11/qt4-tools=			2
PKG_MAKE_JOBS.x11/qt5-qtbase=			2
PKG_MAKE_JOBS.x11/qt5-qtdeclarative=		2
PKG_MAKE_JOBS.x11/wxGTK28=			2

#
# Use a PKGPATH-based definition or the default
#
MAKE_JOBS_DEFAULT=	1
MAKE_JOBS=		${PKG_MAKE_JOBS.${PKGPATH}:U${MAKE_JOBS_DEFAULT}}

#
# Apply custom CFLAGS.
#
CFLAGS+=		-pipe -O2
#
# Whether to strip binaries with install(1).
#
INSTALL_UNSTRIPPED=	yes
#
# Enable -fstack-protector options on supported branches.
#
PKGSRC_USE_SSP=		no

#
# SmartOS GCC settings.  Skip for Linux/OSX builds.
#
.if empty(PKGBUILD:Mlinux-*) && empty(PKGBUILD:Mosx-*)
#
# Always pull in nbpatch as a bootstrap dependency.  This allows us to enable
# the pbulk reuse_scan_results option, as without doing this pbulk will fail
# if a package adds patches where previously it didn't have any due to the
# missing dependency on nbpatch.
#
.  if !empty(PKGBUILD:Mupstream-*) \
   || !empty(PKGBUILD:Mtrunk-*) \
   || !empty(PKGBUILD:M2014Q[34]-*) \
   || !empty(PKGBUILD:M201[5-9]Q[1-4]-*)
TOOLS_PLATFORM.patch=   ${TOOLS_BASEDIR}/bin/nbpatch
.  else
.    if empty(PKGPATH:Mdevel/nbpatch)
BOOTSTRAP_DEPENDS+=	nbpatch-[0-9]*:../../devel/nbpatch
.    endif
.  endif
#
# Use binutils from external tools which are not provided by the platform.
# For trunk we are testing whether adding TOOLS_BASEDIR/bin to PATH is a
# better solution as it helps to avoid hardcoding paths (e.g. granlib in
# libtool).
#
.  if empty(PKGBUILD:Mtrunk-*)
.    for tool in as objcopy objdump ranlib readelf
${tool:tu}=		${TOOLS_BASEDIR}/bin/g${tool}
TOOLS_PATH.${tool}=	${TOOLS_BASEDIR}/bin/g${tool}
TOOLS_CREATE+=		${tool}
.    endfor
.  endif
#
# Avoid circular dependencies by using external tools for gcc, where the tool
# itself depends upon gcc when using USE_PKGSRC_GCC_RUNTIME.
#
.  if !empty(PKGPATH:Mlang/gcc*)
TOOLS_PLATFORM.makeinfo=${TOOLS_BASEDIR}/bin/makeinfo
TOOLS_PLATFORM.perl=	${TOOLS_BASEDIR}/bin/perl
.  endif
#
# We need to ensure that libtool can be built with the pkgsrc gcc so that the
# correct library paths are encoded, and to do that we need to build binutils
# (a gcc dependency) with an external libtool.   XXX: requires pkgsrc patch.
#
.  if !empty(PKGPATH:Mdevel/binutils)
PKG_LIBTOOL=		${TOOLS_BASEDIR}/bin/libtool
PKG_SHLIBTOOL=		${TOOLS_BASEDIR}/bin/shlibtool
.  endif
#
# Whether to depend upon the GCC runtime from the current build.  Generally
# this should be set when binaries are distributed, otherwise they will depend
# upon the GCC runtime from the tools.
#
USE_PKGSRC_GCC_RUNTIME=	yes
#
# Try to avoid requiring clang for GNUstep
#
.  if !empty(PKGBUILD:Mupstream-*)
PKG_OPTIONS.gnustep+=	fragile
.  endif
#
# Use in-tree GCC except on older branches and upstream builds.  Upstream
# builds cannot use in-tree yet as there's no way to build binutils using
# an external libtool without patches at this time.
#
.  if empty(PKGBUILD:M2013Q1-*) \
   && empty(PKGBUILD:M201[012]*) \
   && empty(PKGBUILD:Mupstream*)
#
# Required to avoid circular dependencies with pkg_install vs GCC, we don't
# need to check for outdated pkg_install as it is always current to branch.
#
NO_PKGTOOLS_REQD_CHECK=	yes
#
# If enabled GCC will enable --with-local-prefix=${LOCALBASE}, otherwise it
# will use the default of GCC_PREFIX.  This is required to be disabled for
# the "tools" build so that bad includes don't leak into a non-tools build.
#
USE_GCC_LOCALBASE_PREFIX=	yes
#
# Use external GCC for GCC itself and its dependencies, otherwise we run into
# circular dependencies.
#
.    if !empty(PKGPATH:Mdevel/binutils) \
     || !empty(PKGPATH:Mdevel/gmake) \
     || !empty(PKGPATH:Mdevel/nbpatch) \
     || !empty(PKGPATH:Mlang/gcc2) \
     || !empty(PKGPATH:Mlang/gcc3*) \
     || !empty(PKGPATH:Mlang/gcc??) \
     || !empty(PKGPATH:Mmisc/root) \
     || !empty(PKGPATH:Mpkgtools/abiexec) \
     || !empty(PKGPATH:Mpkgtools/cwrappers) \
     || !empty(PKGPATH:Mpkgtools/digest) \
     || !empty(PKGPATH:Mpkgtools/isaexec) \
     || !empty(PKGPATH:Mpkgtools/pkg_install-info) \
     || !empty(PKGPATH:Msysutils/checkperms)
GCCBASE=		/opt/tools/gcc47
.    else
GCC_REQD=		4.7
USE_PKGSRC_GCC=		yes
.    endif
.  endif
.endif # !Linux && !OSX

#
# ============================================================================
# This section contains mostly Joyent-specific configuration.
# ============================================================================
#
# Skip this entire section for clean upstream builds and Linux/OSX.
#
.if empty(PKGBUILD:Mupstream-*) && empty(PKGBUILD:Mlinux-*) && empty(PKGBUILD:Mosx-*)
#
# We want GNU tools to be default.
#
PKGGNUDIR=		# empty
#
# Make user creation non-fatal
#
PKGINSTALL_IGNORE_UIDGID=	yes
#
# Register shells in /etc/shell at package installation time
#
PKG_REGISTER_SHELLS=	yes
#
# Add -lumem by default, except for packages where it causes issues.
#
.if empty(PKGPATH:Mdevel/ncurses) \
 && empty(PKGPATH:Meditors/emacs*) \
 && empty(PKGPATH:Mjoyent/haskell-platform) \
 && empty(PKGPATH:Mlang/ghc*) \
 && empty(PKGPATH:Mlang/go*) \
 && empty(PKGPATH:M*/hs-*) \
 && empty(PKGPATH:M*/mongo-tools) \
 && empty(PKGPATH:Msecurity/aide) \
 && empty(PKGPATH:M*/consul) \
 && empty(PKGPATH:Mwip/ghc)
.  if !empty(PKGBUILD:M2013Q1-*) \
   || !empty(PKGBUILD:M201[012]*)
LIBS+=			-lumem
.  else
_WRAP_EXTRA_LIBS.CC+=	-lumem
_WRAP_EXTRA_LIBS.CXX+=	-lumem
_WRAP_EXTRA_LIBS.LD+=	-lumem
CWRAPPERS_LDADD.cc+=	-lumem
CWRAPPERS_LDADD.cxx+=	-lumem
CWRAPPERS_LDADD.ld+=	-lumem
.  endif
.endif
#
# Pull in override INSTALL files.
#
.if exists(${PKGBUILD_BASEDIR}/meta/${PKGPATH}/INSTALL)
INSTALL_TEMPLATES+=	${PKGBUILD_BASEDIR}/meta/${PKGPATH}/INSTALL
.endif
#
# Pull in logadm INSTALL files (to be removed when logadm support is
# added into pkgsrc
#
.if exists(${PKGBUILD_BASEDIR}/meta/${PKGPATH}/INSTALL.logadm)
INSTALL_TEMPLATES+=	${PKGBUILD_BASEDIR}/meta/${PKGPATH}/INSTALL.logadm
.endif
#
# Include files which contain large, self-contained configuration areas.
#
.include "${PKGBUILD_BASEDIR}/include/pkgoptions.mk"
.include "${PKGBUILD_BASEDIR}/include/pkgfail.mk"
.include "${PKGBUILD_BASEDIR}/include/project.mk"
.include "${PKGBUILD_BASEDIR}/include/smf.mk"
.include "${PKGBUILD_BASEDIR}/include/users.mk"
#
# SMF source files. XXX: only used by 2013Q4 and older.
#
SMFBASE=		${PKGBUILD_BASEDIR}/meta
.endif

#
# ============================================================================
# Common includes to all builds.  Over time more bits from this file should be
# moved into separate includes for better organisation.
# ============================================================================
#
.include "${PKGBUILD_BASEDIR}/include/hacks.mk"

#
# ============================================================================
# Any additional per-config custom configuration.
# ============================================================================
#


#
# Optional user overrides
#
.sinclude "${PKGBUILD_BASEDIR}/conf/${PKGBUILD}/mk.conf.local"
