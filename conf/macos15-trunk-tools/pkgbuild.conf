#
# Per-pkgbuild configuration.
#
export BOOTSTRAP_ARG_COMPILER=${BOOTSTRAP_ARG_COMPILER:-}
export BOOTSTRAP_ARG_JOBS=${BOOTSTRAP_ARG_JOBS:---make-jobs=8}
export BOOTSTRAP_ARG_MULTIARCH=${BOOTSTRAP_ARG_MULTIARCH:-}
export BOOTSTRAP_ARG_PREFER=${BOOTSTRAP_ARG_PREFER:-}
export BOOTSTRAP_CFLAGS=${BOOTSTRAP_CFLAGS:--pipe -Os}
export BOOTSTRAP_ENV=${BOOTSTRAP_ENV:-MANZ=yes}
export BOOTSTRAP_KIT=${BOOTSTRAP_KIT:-bootstrap-macos15-trunk-tools}
export BOOTSTRAP_PACKAGES=${BOOTSTRAP_PACKAGES:-bmake bootstrap-mk-files cwrappers mksh nawk nbsed pkg_install mozilla-rootcerts pkg_alternatives pkgin pkgsrc-gnupg-keys}
export BOOTSTRAP_PBULK_DIR=${BOOTSTRAP_PBULK_DIR:-Darwin/bootstrap-pbulk}
export BOOTSTRAP_PKGBUILD_DIR=${BOOTSTRAP_PKGBUILD_DIR:-Darwin/bootstrap-pkgbuild}
export BOOTSTRAP_RELEASE_DIR=${BOOTSTRAP_RELEASE_DIR:-Darwin/bootstrap}
export BULKLOG_BASEDIR=${BULKLOG_BASEDIR:-/Volumes/data/bulklog}
export BULKLOG_DIR=${BULKLOG_DIR:-Darwin/10.15/trunk/tools}
export CHROOT_BASEDIR=${CHROOT_BASEDIR:-/Volumes/data/chroot}
export CHROOT_CREATE=${CHROOT_CREATE:-/Volumes/data/pkgbuild/scripts/mksandbox-macos}
export CHROOT_DELETE=${CHROOT_DELETE:-/Volumes/data/pkgbuild/scripts/rmsandbox-macos}
export CMD_GPG=${CMD_GPG:-/opt/pkg/bin/gpg2}
export CMD_SU=${CMD_SU:-/usr/bin/su}
export CMD_TAR=${CMD_TAR:-/usr/bin/tar}
export CMD_XZ=${CMD_XZ:-/opt/pkg/bin/xz}
export FAILURE_RECIPIENTS=${FAILURE_RECIPIENTS:-pkgsrc@example.com}
export HOSTS_REQUIRED=${HOSTS_REQUIRED:-}
export JENKINS_POST_BUILD=${JENKINS_POST_BUILD:-}
export JENKINS_PRE_BUILD=${JENKINS_PRE_BUILD:-/Volumes/data/pkgbuild/scripts/run-bootstrap}
export LOCAL_PACKAGE_BASEDIR=${LOCAL_PACKAGE_BASEDIR:-/Volumes/data/packages}
export LOCAL_PACKAGE_DIR=${LOCAL_PACKAGE_DIR:-Darwin/10.15/trunk/tools}
export LOFS_RO_MOUNTS=${LOFS_RO_MOUNTS:-}
export LOFS_RO_MOUNTS_LINUX=${LOFS_RO_MOUNTS_LINUX:-}
export LOFS_RW_MOUNTS=${LOFS_RW_MOUNTS:-}
export LOFS_RW_MOUNTS_LINUX=${LOFS_RW_MOUNTS_LINUX:-}
export NFS_RO_MOUNTS=${NFS_RO_MOUNTS:-localhost:/Library=/Library localhost:/System=/System localhost:/private/etc=/etc localhost:/bin=/bin localhost:/sbin=/sbin localhost:/usr=/usr localhost:/var/root/.gnupg=/var/root/.gnupg localhost:/var/root/.ssh=/var/root/.ssh localhost:/Volumes/data/pkgbuild=/Volumes/data/pkgbuild}
export NFS_MOUNTS=${NFS_MOUNTS:-localhost:/private/var/spool/postfix=/private/var/spool/postfix 127.0.0.1:/Volumes/data/bulklog=/Volumes/data/bulklog 127.0.0.1:/Volumes/data/distfiles=/Volumes/data/distfiles 127.0.0.1:/Volumes/data/packages=/Volumes/data/packages 127.0.0.1:/Volumes/data/pkgsrc=/Volumes/data/pkgsrc}
export NFS_OPTIONS=${NFS_OPTIONS:--o vers=2}
export OVERLAY_MOUNTS=${OVERLAY_MOUNTS:-}
export PBULK_BASEDIR=${PBULK_BASEDIR:-/opt/pkg}
export PBULK_CLIENTS=${PBULK_CLIENTS:-127.0.0.1}
export PBULK_PATH=${PBULK_PATH:-/sbin:/bin:/usr/sbin:/usr/bin}
export PBULK_RSYNC_DIRS=${PBULK_RSYNC_DIRS:-}
export PI_REQUIRED=${PI_REQUIRED:-}
export PKGBUILD=${PKGBUILD:-macos15-trunk-tools}
export PKGBUILD_ABI=${PKGBUILD_ABI:-64}
export PKGBUILD_BASEDIR=${PKGBUILD_BASEDIR:-/Volumes/data/pkgbuild}
export PKGBUILD_GCC_REQD=${PKGBUILD_GCC_REQD:-}
export PKGBUILD_GPG_SIGN_AS=${PKGBUILD_GPG_SIGN_AS:-}
export PKGBUILD_LOCALBASE=${PKGBUILD_LOCALBASE:-/opt/tools}
export PKGBUILD_OPSYS=${PKGBUILD_OPSYS:-Darwin}
export PKGBUILD_PKGDBDIR=${PKGBUILD_PKGDBDIR:-/opt/tools/.pkgdb}
export PKGBUILD_PKGMANDIR=${PKGBUILD_PKGMANDIR:-share/man}
export PKGBUILD_SYSCONFDIR=${PKGBUILD_SYSCONFDIR:-/opt/tools/etc}
export PKGBUILD_VARBASE=${PKGBUILD_VARBASE:-/opt/tools/var}
export PKGSRC_BASEDIR=${PKGSRC_BASEDIR:-/Volumes/data}
export PKGSRC_DIR=${PKGSRC_DIR:-pkgsrc}
export REMOTE_PACKAGE_BASEDIR=${REMOTE_PACKAGE_BASEDIR:-pkgsrc.joyent.com/packages}
export REMOTE_PACKAGE_DIR=${REMOTE_PACKAGE_DIR:-Darwin/trunk/tools}
export REMOTE_PACKAGE_URL=${REMOTE_PACKAGE_URL:-https://pkgsrc.joyent.com/packages}
export REPORT_FROM_ADDR=${REPORT_FROM_ADDR:-root}
export REPORT_FROM_NAME=${REPORT_FROM_NAME:-Bulk Build User}
export REPORT_RECIPIENTS=${REPORT_RECIPIENTS:-root}
export ROOT_HOMEDIR=${ROOT_HOMEDIR:-/var/root}
export SHADOW_BASEDIR=${SHADOW_BASEDIR:-/Volumes/data/shadows}
export SYNC_DATA=${SYNC_DATA:-false}
export TMPFS_MOUNTS=${TMPFS_MOUNTS:-/Users/pbulk/build=2048 /opt/tools=2048 /tmp=128 /var=256}
export TOOLS_BASEDIR=${TOOLS_BASEDIR:-/opt/pkg}
export TOOLS_BOOTSTRAP=${TOOLS_BOOTSTRAP:-}
export TOOLS_BUILD_PACKAGES=${TOOLS_BUILD_PACKAGES:-joyent/gnupg20 lang/nodejs pkgtools/pbulk pkgtools/pkgdiff pkgtools/pkglint}
export TOOLS_COMPILER=${TOOLS_COMPILER:-}
export TOOLS_PACKAGE_DIR=${TOOLS_PACKAGE_DIR:-}
export USE_LOCAL_PKG_PATH=${USE_LOCAL_PKG_PATH:-no}
export VERIFIED_INSTALLATION_PBULK=${VERIFIED_INSTALLATION_PBULK:-}

# Load user overrides
if [ -f "${PKGBUILD_BASEDIR}/conf/${PKGBUILD}/pkgbuild.conf.local" ]; then
	. ${PKGBUILD_BASEDIR}/conf/${PKGBUILD}/pkgbuild.conf.local
fi

# Handle renamed variable for a while as it was documented on the wiki.
if [ -n "${PKGSRC_GPG_SIGN_AS}" ]; then
	echo "WARNING: PKGSRC_GPG_SIGN_AS is deprecated, use PKGBUILD_GPG_SIGN_AS" >&2
	sleep 5
	PKGBUILD_GPG_SIGN_AS=${PKGSRC_GPG_SIGN_AS}
fi

# Sanity check
my_opsys="$(uname -s)"
if [ "${my_opsys}" != "${PKGBUILD_OPSYS}" ]; then
	echo "ERROR: ${PKGBUILD} isn't a suitable pkgbuild for ${my_opsys}" >&2
	exit 1
fi
