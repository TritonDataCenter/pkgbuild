#
# Per-pkgbuild configuration.
#
export ABI=${ABI:-32}
export BOOTSTRAP_ARG_COMPILER=${BOOTSTRAP_ARG_COMPILER:-}
export BOOTSTRAP_ARG_JOBS=${BOOTSTRAP_ARG_JOBS:---make-jobs=8}
export BOOTSTRAP_ARG_MULTIARCH=${BOOTSTRAP_ARG_MULTIARCH:---multiarch}
export BOOTSTRAP_ARG_PREFER=${BOOTSTRAP_ARG_PREFER:---prefer-pkgsrc=yes}
export BOOTSTRAP_CFLAGS=${BOOTSTRAP_CFLAGS:--pipe -O2}
export BOOTSTRAP_ENV=${BOOTSTRAP_ENV:-CC=/opt/tools/gcc47/bin/gcc INSTALL_UNSTRIPPED=yes RANLIB=/opt/tools/bin/granlib}
export BOOTSTRAP_KIT=${BOOTSTRAP_KIT:-bootstrap-2015Q3-multiarch}
export BOOTSTRAP_PBULK_DIR=${BOOTSTRAP_PBULK_DIR:-SmartOS/bootstrap-pbulk}
export BOOTSTRAP_PKGBUILD_DIR=${BOOTSTRAP_PKGBUILD_DIR:-SmartOS/bootstrap-pkgbuild}
export BOOTSTRAP_RELEASE_DIR=${BOOTSTRAP_RELEASE_DIR:-SmartOS/bootstrap}
export BULKLOG_BASEDIR=${BULKLOG_BASEDIR:-/data/bulklog}
export BULKLOG_DIR=${BULKLOG_DIR:-2015Q3/multiarch}
export CHROOT_BASEDIR=${CHROOT_BASEDIR:-/data/chroot}
export CHROOT_CREATE=${CHROOT_CREATE:-/data/pkgbuild/scripts/mksandbox}
export CHROOT_DELETE=${CHROOT_DELETE:-/data/pkgbuild/scripts/rmsandbox}
export FAILURE_RECIPIENTS=${FAILURE_RECIPIENTS:-pkgsrc@example.com}
export GCC_REQD=${GCC_REQD:-4.7}
export GPG=${GPG:-/opt/tools/bin/gpg2}
export GPG_SIGN_AS=${GPG_SIGN_AS:-}
export HOSTS_REQUIRED=${HOSTS_REQUIRED:-}
export JENKINS_POST_BUILD=${JENKINS_POST_BUILD:-}
export JENKINS_PRE_BUILD=${JENKINS_PRE_BUILD:-/data/pkgbuild/scripts/run-bootstrap}
export LOCAL_PACKAGE_BASEDIR=${LOCAL_PACKAGE_BASEDIR:-/data/packages}
export LOCAL_PACKAGE_DIR=${LOCAL_PACKAGE_DIR:-SmartOS/2015Q3/multiarch}
export LOFS_RO_MOUNTS=${LOFS_RO_MOUNTS:-/root/.gnupg=/root/.gnupg /root/.ssh=/root/.ssh /workspace=/workspace}
export LOFS_RO_MOUNTS_LINUX=${LOFS_RO_MOUNTS_LINUX:-}
export LOFS_RW_MOUNTS=${LOFS_RW_MOUNTS:-/data=/data}
export LOFS_RW_MOUNTS_LINUX=${LOFS_RW_MOUNTS_LINUX:-}
export NFS_MOUNTS=${NFS_MOUNTS:-}
export OPSYS=${OPSYS:-SunOS}
export OVERLAY_MOUNTS=${OVERLAY_MOUNTS:-/data/pkgbuild/overlay/pwd.h=/usr/include/pwd.h /data/pkgbuild/overlay/grp.h=/usr/include/grp.h /data/pkgbuild/overlay/errorhdr.h=/usr/include/sys/epoll.h /data/pkgbuild/overlay/errorhdr.h=/usr/include/sys/inotify.h}
export PBULK_BASEDIR=${PBULK_BASEDIR:-/opt/tools}
export PBULK_CLIENTS=${PBULK_CLIENTS:-127.0.0.1}
export PBULK_PATH=${PBULK_PATH:-/sbin:/usr/sbin:/usr/bin}
export PI_REQUIRED=${PI_REQUIRED:-}
export PKGBUILD=${PKGBUILD:-2015Q3-multiarch}
export PKGBUILD_BASEDIR=${PKGBUILD_BASEDIR:-/data/pkgbuild}
export PKGDBDIR=${PKGDBDIR:-/opt/local/pkg}
export PKGMANDIR=${PKGMANDIR:-man}
export PKGSRC_BASEDIR=${PKGSRC_BASEDIR:-/data}
export PKGSRC_DIR=${PKGSRC_DIR:-pkgsrc}
export PREFER_NATIVE=${PREFER_NATIVE:-yes}
export PREFIX=${PREFIX:-/opt/local}
export REMOTE_PACKAGE_BASEDIR=${REMOTE_PACKAGE_BASEDIR:-pkgsrc.joyent.com/packages}
export REMOTE_PACKAGE_DIR=${REMOTE_PACKAGE_DIR:-SmartOS/2015Q3/multiarch}
export REMOTE_PACKAGE_URL=${REMOTE_PACKAGE_URL:-http://pkgsrc.joyent.com/packages}
export REPORT_FROM_ADDR=${REPORT_FROM_ADDR:-root}
export REPORT_FROM_NAME=${REPORT_FROM_NAME:-Bulk Build User}
export REPORT_RECIPIENTS=${REPORT_RECIPIENTS:-root}
export ROOT_HOMEDIR=${ROOT_HOMEDIR:-/root}
export SHADOW_BASEDIR=${SHADOW_BASEDIR:-}
export SU=${SU:-/usr/bin/su}
export SYNC_DATA=${SYNC_DATA:-false}
export SYSCONFDIR=${SYSCONFDIR:-/opt/local/etc}
export TAR=${TAR:-/usr/bin/gtar}
export TMPFS_MOUNTS=${TMPFS_MOUNTS:-/tmp /var/tmp}
export TOOLS_BASEDIR=${TOOLS_BASEDIR:-/opt/tools}
export TOOLS_BOOTSTRAP=${TOOLS_BOOTSTRAP:-bootstrap-2015Q3-tools.tar.gz}
export TOOLS_BUILD_PACKAGES=${TOOLS_BUILD_PACKAGES:-}
export TOOLS_COMPILER=${TOOLS_COMPILER:-gcc47}
export TOOLS_PACKAGE_DIR=${TOOLS_PACKAGE_DIR:-SmartOS/2015Q3/tools}
export USE_LOCAL_PKG_PATH=${USE_LOCAL_PKG_PATH:-no}
export VARBASE=${VARBASE:-/var}
export VERIFIED_INSTALLATION_PBULK=${VERIFIED_INSTALLATION_PBULK:-}
export XZ=${XZ:-/opt/tools/bin/xz}

# Sanity check
my_opsys="$(uname -s)"
if [ "${my_opsys}" != "${OPSYS}" ]; then
	echo "ERROR: ${PKGBUILD} isn't a suitable pkgbuild for ${my_opsys}" >&2
	exit 1
fi
