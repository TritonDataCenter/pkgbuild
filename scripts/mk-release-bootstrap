#!/bin/bash
#
# Create the final bootstrap kit for each pkgbuild.
#

if [ $# -ne 1 ]; then
	echo "usage: $0 <pkgbuild>" 1>&2
	exit 2
else
	pkgbuild=$1; shift
fi

# Load per-pkgbuild config
. $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf

${CHROOT_CREATE} ${CHROOT_BASEDIR}/bootstrap-${pkgbuild}
chroot ${CHROOT_BASEDIR}/bootstrap-${pkgbuild} /bin/bash -c "
	PATH=${PBULK_PATH}
	${TAR} -zxf ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_PBULK_DIR}/${BOOTSTRAP_KIT}.tar.gz -C /
	PATH=${PREFIX}/sbin:${PREFIX}/bin:${PBULK_PATH}
	PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${LOCAL_PACKAGE_DIR}/${binpkgpath}/All ${PREFIX}/sbin/pkg_add \
	    mozilla-rootcerts pkg_alternatives pkgin pkgsrc-gnupg-keys
	${PREFIX}/sbin/mozilla-rootcerts install >/dev/null
	rm -f ${PREFIX}/.dlj_license_accepted
	ed ${SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
		1,5d
		i
		#
		# Configuration file for building pkgsrc packages from source.  See
		# http://pkgsrc.joyent.com/docs/building/ for more information.
		#

		.
		/^.include/
		?^.?+1
		.,$ d
		g/^TOOLS_PLATFORM/s/\?//
		g/^TOOLS_PLATFORM/s/		/	/
		w
		q
	EOF
	# This is only required for legacy builds and could be removed.
	if [ -n '${PREFER_NATIVE}' -a '${PREFER_NATIVE}' != 'yes' ]; then
		ed ${SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			/^PREFER_PKGSRC/
			i
			PREFER_NATIVE=		${PREFER_NATIVE}
			.
			w
			q
		EOF
	fi
	# SmartOS specific, keyed on GCC_REQD being set.
	if [ -n '${GCC_REQD}' ]; then
		ed ${SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			/^PKGSRC_COMPILER/
			a
			GCC_REQD=		${GCC_REQD}
			USE_PKGSRC_GCC=		yes
			USE_PKGSRC_GCC_RUNTIME=	yes
			.
			w
			q
		EOF
	# XXX: Assume OSX for now, tidy later.
	else
		ed ${SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			a

			FETCH_USING=		curl
			MULTILIB_SUPPORTED=	no
			X11_TYPE=		native
			X11BASE=		/opt/X11

			.
			r ${PKGBUILD_BASEDIR}/include/pkgoptions/osx.mk
			w
			q
		EOF
	fi
	cat >>${SYSCONFDIR}/pkgin/repositories.conf <<-EOF
		#
		http://${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/All
	EOF
	ed ${SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
		/^GPG=/d
		/^GPG_SIGN_AS=/d
		\$
		a
		GPG_KEYRING_PKGVULN=${PREFIX}/share/gnupg/pkgsrc-security.gpg
		PKG_PATH=http://${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/All
		.
		w
		q
	EOF
	if [ -n '${GPG_SIGN_AS}' ]; then
		ed ${SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
			a
			VERIFIED_INSTALLATION=trusted
			.
			w
			q
		EOF
	fi
	mkdir -p ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}
	(cd /; ${TAR} -zcf ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}/${BOOTSTRAP_KIT}.tar.gz .${PREFIX})
"
${CHROOT_DELETE} ${CHROOT_BASEDIR}/bootstrap-${pkgbuild}
echo "Created ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}/${BOOTSTRAP_KIT}.tar.gz"
