#!/bin/bash
#
# Create the final bootstrap kit for each pkgbuild.
#

usage()
{
	echo "usage: $0 [-h] [-d YYYYMMDD] <pkgbuild>" >&2
}

bootstrap_date=""
while getopts ":d:h" opt; do
	case "${opt}" in
	d)
		bootstrap_date="-${OPTARG}"
		;;
	h)
		usage
		exit
		;;
	*)
		usage
		exit 2
		;;
	esac
done
shift $((OPTIND - 1))

if [ $# -eq 1 ]; then
	pkgbuild=$1; shift
else
	usage
	exit 2
fi

# Load per-pkgbuild config
. $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf

# Helpful aliases
RELEASE_TAR="${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}/${BOOTSTRAP_KIT}${bootstrap_date}.tar.gz"
RELEASE_ASC="${RELEASE_TAR}.asc"
UPGRADE_TAR="${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}/${BOOTSTRAP_KIT}${bootstrap_date}-upgrade.tar.gz"
UPGRADE_ASC="${UPGRADE_TAR}.asc"

${CHROOT_CREATE} ${CHROOT_BASEDIR}/bootstrap-${pkgbuild}
/usr/sbin/chroot ${CHROOT_BASEDIR}/bootstrap-${pkgbuild} /bin/bash -c "
	set -e
	PATH=${PBULK_PATH}
	${CMD_TAR} -zxf ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_PBULK_DIR}/${BOOTSTRAP_KIT}.tar.gz -C /
	PATH=${PKGSRC_PREFIX}/sbin:${PKGSRC_PREFIX}/bin:${PBULK_PATH}
	# Ensure bootstrap packages are upgraded as well as installing extra
	# packages to ensure we use main ones and not limited bootstrap ones.
	PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${LOCAL_PACKAGE_DIR}/${binpkgpath}/All \
	    ${PKGSRC_PREFIX}/sbin/pkg_add -U \
	    bmake bsdinstall mozilla-rootcerts nawk nbsed \
	    pkg_alternatives pkg_install pkgin pkgsrc-gnupg-keys
	# Avoid 'install' as it fails if /etc/ssl/certs exists.
	(
		cd ${PKGSRC_SYSCONFDIR}/openssl/certs
		${PKGSRC_PREFIX}/sbin/mozilla-rootcerts extract >/dev/null
		${PKGSRC_PREFIX}/sbin/mozilla-rootcerts rehash >/dev/null
	)
	rm -f ${PKGSRC_PREFIX}/.dlj_license_accepted
	ed ${PKGSRC_SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
		1,5d
		i
		#
		# Configuration file for building pkgsrc packages from source.  See
		# http://pkgsrc.joyent.com/docs/building/ for more information.
		#

		.
		/^.include/
		?^.?+1
		.,$ d
		g/^TOOLS_PLATFORM/s/\?//
		g/^TOOLS_PLATFORM/s/		/	/
		w
		q
	EOF
	# This is only required for legacy builds and could be removed.
	if [ -n '${PREFER_NATIVE}' -a '${PREFER_NATIVE}' != 'yes' ]; then
		ed ${PKGSRC_SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			/^PREFER_PKGSRC/
			i
			PREFER_NATIVE=		${PREFER_NATIVE}
			.
			w
			q
		EOF
	fi
	# SmartOS specific, keyed on PKGSRC_GCC_REQD being set.
	if [ -n '${PKGSRC_GCC_REQD}' ]; then
		ed ${PKGSRC_SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			/^PKGSRC_COMPILER/
			a
			GCC_REQD=		${PKGSRC_GCC_REQD}
			USE_PKGSRC_GCC=		yes
			USE_PKGSRC_GCC_RUNTIME=	yes
			.
			w
			q
		EOF
	elif [ '${PKGSRC_OPSYS}' = 'Darwin' ]; then
		ed ${PKGSRC_SYSCONFDIR}/mk.conf >/dev/null 2>&1 <<-EOF
			a

			FETCH_USING=		curl
			MULTILIB_SUPPORTED=	no
			PKGSRC_FORTRAN=		gfortran
			X11_TYPE=		modular

			.
			r ${PKGBUILD_BASEDIR}/include/pkgoptions/osx.mk
			w
			q
		EOF
	fi
	cat >>${PKGSRC_SYSCONFDIR}/mk.conf <<-EOF

		#
		# All local changes should go into this file, as mk.conf could
		# be replaced on upgrades.
		#
		.sinclude \"${PKGSRC_SYSCONFDIR}/mk.conf.local\"
	EOF
	cat >>${PKGSRC_SYSCONFDIR}/pkgin/repositories.conf <<-EOF
		#
		${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/All
	EOF
	ed ${PKGSRC_SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
		g/^GPG=/d
		g/^GPG_SIGN_AS=/d
		g/^VERIFIED_INSTALLATION=/d
		$ a
		GPG_KEYRING_PKGVULN=${PKGSRC_PREFIX}/share/gnupg/pkgsrc-security.gpg
		PKG_PATH=${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/All
		.
		w
		q
	EOF
	if [ -n '${PKGSRC_GPG_SIGN_AS}' ]; then
		ed ${PKGSRC_SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
			a
			VERIFIED_INSTALLATION=always
			.
			w
			q
		EOF
	fi
	tarextras=
	slashprivate=
	if [ '${PKGSRC_OPSYS}' = 'Darwin' ]; then
		echo '${PKGSRC_PREFIX}/sbin' >/etc/paths.d/10-pkgsrc
		echo '${PKGSRC_PREFIX}/bin' >>/etc/paths.d/10-pkgsrc
		tarextras='./private/etc/paths.d/10-pkgsrc'
		# Work around El Capitan 'Cannot extract through symlink var'.
		if [ '${PKGSRC_VARBASE}' = '/var' ]; then
			slashprivate='/private'
		fi
	fi
	mkdir -p \${slashprivate}${PKGSRC_VARBASE}/db/pkgin/cache
	mkdir -p ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_RELEASE_DIR}
	${CMD_TAR} -zc -f ${RELEASE_TAR} -C / \
	    --exclude '.fseventsd' --exclude '.metadata_never_index' \
	    .${PKGSRC_PREFIX} \
	    .\${slashprivate}${PKGSRC_VARBASE}/db/pkgin/cache \
	    \${tarextras}
	${CMD_TAR} -zc -f ${UPGRADE_TAR} -C / \
	    --exclude '.fseventsd' --exclude '.metadata_never_index' \
	    .${PKGSRC_SYSCONFDIR}/gnupg/pkgsrc.gpg \
	    .${PKGSRC_SYSCONFDIR}/mk.conf \
	    .${PKGSRC_SYSCONFDIR}/pkg_install.conf \
	    .${PKGSRC_SYSCONFDIR}/pkgin/repositories.conf
	if [ -n '${PKGSRC_GPG_SIGN_AS}' ]; then
		rm -f ${RELEASE_ASC} ${UPGRADE_ASC}
		${CMD_GPG} --armor --sign --detach -u ${PKGSRC_GPG_SIGN_AS} ${RELEASE_TAR}
		${CMD_GPG} --armor --sign --detach -u ${PKGSRC_GPG_SIGN_AS} ${UPGRADE_TAR}
	fi
"
bsret=$?
${CHROOT_DELETE} ${CHROOT_BASEDIR}/bootstrap-${pkgbuild}
chret=$?
if [ ${bsret} -eq 0 ]; then
	echo "Created ${RELEASE_TAR}"
	if [ -n "${PKGSRC_GPG_SIGN_AS}" ]; then
		echo "Created ${RELEASE_ASC}"
	fi
	echo "Created ${UPGRADE_TAR}"
	if [ -n "${PKGSRC_GPG_SIGN_AS}" ]; then
		echo "Created ${UPGRADE_ASC}"
	fi
else
	echo "Bootstrap creation failed."
fi
exit $((${bsret} + ${chret}))
