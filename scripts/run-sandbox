#!/bin/bash
#

usage()
{
	echo "usage: $0 [-f] <pkgbuild>" >&2
	exit 2
}

force=false
while getopts ":f" opt; do
	case "${opt}" in
	f)
		force=true
		;;
	*)
		usage
		;;
	esac
done
shift $((OPTIND - 1))

if [ $# -eq 1 ]; then
	pkgbuild=$1; shift
else
	usage
fi

#
# Load per-pkgbuild config
#
if [ ! -f $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf ]; then
	echo "Config not found for pkgbuild \"${pkgbuild}\"" >&2
	exit 1
fi
. $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf

chrootdir="${CHROOT_BASEDIR}/dev-${PKGBUILD}"

#
# Check that we're on the correct set of hosts for the build
#
if [ -n "${HOSTS_REQUIRED}" ]; then
	if ! $force && [[ ! "$(uname -n)" =~ ${HOSTS_REQUIRED} ]]; then
		echo "You must use a host matching ${HOSTS_REQUIRED} for ${pkgbuild}" >&2
		exit 1
	fi
fi

if [ -d ${chrootdir} ]; then
	echo "Chroot ${chrootdir} already exists, not continuing" >&2
	exit 1
fi

echo -n "Creating ${chrootdir}..."
${CHROOT_CREATE} ${chrootdir} && echo "done."
echo -n "Unpacking ${BOOTSTRAP_KIT} into ${chrootdir}..."
/usr/sbin/chroot ${chrootdir} /bin/bash -c "
	${CMD_TAR} -zxf ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_PBULK_DIR}/${BOOTSTRAP_KIT}.tar.gz -C /
" && echo "done."
echo -n "Setting environment..."
cat >${chrootdir}${ROOT_HOMEDIR}/.bash_profile <<EOF
PATH="${PKGSRC_PREFIX}/sbin:${PKGSRC_PREFIX}/bin:${PBULK_PATH}:${TOOLS_BASEDIR}/sbin:${TOOLS_BASEDIR}/bin"
PS1="\[\033[0m\]\[\033[1;36m\]-\[\033[0m\]\[\033[0;36m\]-\[\033[0m\]\[\033[1;36m\]<\[\033[0m\]\[\033[0;32m\]\u\[\033[0m\]\[\033[1;35m\]@\[\033[0m\]\[\033[0;32m\]\h\[\033[0m\]\[\033[1;36m\]>\[\033[0m\]\[\033[0;36m\]-\[\033[0m\]\[\033[1;36m\](\[\033[0m\]\[\033[0;31m\]${chrootdir}\[\033[0m\]\[\033[1;36m\])-\[\033[0m\]\[\033[1;36m\]<\[\033[0m\]\[\033[0;33m\]\w\[\033[0m\]\[\033[1;36m\]>\[\033[0m\]\[\033[0;36m\]-\[\033[0m\]\[\033[1;36m\]-\n\[\033[0m\]\[\033[0m\]\[\033[0;36m\]-\[\033[0m\]\[\033[0;37m\]> \[\033[0m\]"
export DEPENDS_TARGET=bin-install
export PKG_SKIP_SMF=yes
set -o vi
alias cdwrk='cd \$(bmake show-var VARNAME=WRKSRC)'
alias cdwrkdir='cd \$(bmake show-var VARNAME=WRKDIR)'
EOF
ed ${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
	g/^VERIFIED_INSTALLATION=/d
	w
	q
EOF
if [ -n "${CMD_GPG}" -a -n "${PKGSRC_GPG_SIGN_AS}" ]; then
	ed ${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
		g/^GPG=/d
		g/^GPG_SIGN_AS=/d
		i
		GPG=${CMD_GPG}
		GPG_SIGN_AS=${PKGSRC_GPG_SIGN_AS}
		.
		w
		q
	EOF
fi

if [ ${USE_LOCAL_PKG_PATH} = yes ]; then
	cat >>${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf <<-EOF
		PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${LOCAL_PACKAGE_DIR}/All
	EOF
else
	cat >>${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf <<-EOF
		PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${LOCAL_PACKAGE_DIR}/All;${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/All
	EOF
	cat >>${chrootdir}${PKGSRC_SYSCONFDIR}/mk.conf <<-EOF
		#
		# Additional settings for this build sandbox
		#
		BINPKG_SITES=	${REMOTE_PACKAGE_URL}/${REMOTE_PACKAGE_DIR}/
	EOF
fi
if [ -n ${PKGSRC_GPG_SIGN_AS} ]; then
	ed ${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf >/dev/null 2>&1 <<-EOF
		g/^GPG=/d
		g/^GPG_SIGN_AS=/d
		w
		q
	EOF
	cat >>${chrootdir}${PKGSRC_SYSCONFDIR}/pkg_install.conf <<-EOF
		GPG=${CMD_GPG}
		GPG_SIGN_AS=${PKGSRC_GPG_SIGN_AS}
	EOF
fi

cat >${chrootdir}${ROOT_HOMEDIR}/.curlrc <<-EOF
	--capath ${TOOLS_BASEDIR}/etc/openssl/certs
EOF
cat >${chrootdir}${ROOT_HOMEDIR}/.vimrc <<-EOF
	syntax on
EOF
cat >>${chrootdir}${PKGSRC_SYSCONFDIR}/mk.conf <<-EOF
	MAKE_JOBS=	8
EOF
echo "done."
echo -n "Installing additional tools packages..."
/usr/sbin/chroot ${chrootdir} /bin/bash -c "
	${TOOLS_BASEDIR}/sbin/pkg_add git-base grep mozilla-rootcerts pkgdiff pkglint >/dev/null 2>&1
	${TOOLS_BASEDIR}/sbin/mozilla-rootcerts install >/dev/null 2>&1 || true
"
echo "done."
echo "Logging in.  WARNING: On logout the sandbox will be destroyed."
/usr/sbin/chroot ${chrootdir} /bin/bash --login
echo "Cleaning ${chrootdir}..."
${CHROOT_DELETE} ${chrootdir} && echo "done."
