#!/bin/bash
#
# Create a shadowed sandbox from the root file system ready for builds.
#

if [ $# -eq 1 ]; then
	chrootdir=$1; shift
	chrootname=$(basename ${chrootdir})
else
	echo "usage: $0 <chrootdir>" >&2
	exit 2
fi

while true; do
	if [ -d ${chrootdir} ]; then
		#echo "${chrootdir} already exists, retrying or ^C" >&2
		sleep 5
	else
		break
	fi
done

# Calculate pkgbuild based on chroot name.
pkgbuild=${chrootname}
pkgbuild=${pkgbuild#bootstrap-pbulk-}
pkgbuild=${pkgbuild#bootstrap-}
pkgbuild=${pkgbuild#dev-}
pkgbuild=${pkgbuild#pkgsrc-}
pkgbuild=${pkgbuild%%-build}
pkgbuild=${pkgbuild%%-scan}
pkgbuild=${pkgbuild%%-build-*}
pkgbuild=${pkgbuild%%-scan-*}

# Load per-pkgbuild configuration.
if [ ! -f $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf ]; then
	echo "Couldn't determine pkgbuild from ${chrootdir}" >&2
	exit 1
fi
. $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf

# Figure out where / is mounted
rootdev=$(df -l / | awk '$NF == "/" {print $1}')

mkdir -p ${SHADOW_BASEDIR}
chrootdev=$(hdiutil attach \
    -shadow ${SHADOW_BASEDIR}/${chrootname}.shadow \
    -mountpoint ${chrootdir} \
    -noverify -private ${rootdev} | awk '{print $1}')
mount -u -o noatime,nobrowse,nodev,nosuid ${chrootdev}
echo ${chrootdev} >${SHADOW_BASEDIR}/${chrootname}.dev

mount_devfs devfs ${chrootdir}/dev

for mount in ${NFS_MOUNTS}; do
	src=${mount%=*}
	dst=${mount#*=}
	mkdir -p ${chrootdir}${dst}
	mount_nfs ${src} ${chrootdir}${dst}
done

for mount in ${TMPFS_MOUNTS}; do
	mnt=${mount%=*}
	size=${mount#*=}
	rm -f ${chrootdir}${mnt}
	mkdir -p ${chrootdir}${mnt}
	rd=$(hdid -nomount ram://$((${size} * 1024 * 2)))
	newfs_hfs -s ${rd} >/dev/null
	mount_hfs -o noatime,nobrowse ${rd} ${chrootdir}${mnt}
	echo ${rd} >>${SHADOW_BASEDIR}/${chrootname}.ramfs
done

# If /tmp is a tmpfs, we want to share it with /var/tmp
chmod 1777 ${chrootdir}/tmp
rm -rf ${chrootdir}/var/tmp
ln -s /tmp ${chrootdir}/var/tmp

# Symlink various high-IO VARBASE things to tmpfs.
rm -rf ${chrootdir}/var/cache
mkdir -p ${chrootdir}/tmp/var_cache
ln -s /tmp/var_cache ${chrootdir}/var/cache
rm -rf ${chrootdir}/var/lib/texmf
mkdir -p ${chrootdir}/tmp/var_lib_texmf
ln -s /tmp/var_lib_texmf ${chrootdir}/var/lib/texmf

# XXX
chown pbulk ${chrootdir}/Users/pbulk/build 2>/dev/null

#
# Unpack tools bootstrap and install required packages for building.
#
if [ -n "${TOOLS_BOOTSTRAP}" ]; then
	case "${chrootname}" in
	*-build-*|*-scan-*)
		tools_packages="nbpatch pbulk"
		;;
	*)
		tools_packages="gnupg2 nbpatch nodejs pbulk"
		;;
	esac
	/usr/sbin/chroot ${chrootdir} /bin/bash -c "
		${TAR} -zxf ${LOCAL_PACKAGE_BASEDIR}/bootstrap-pbulk/${TOOLS_BOOTSTRAP} -C /
		if [ ${USE_LOCAL_PKG_PATH} = yes ]; then
			cat >>${TOOLS_BASEDIR}/etc/pkg_install.conf <<-EOF
				PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${TOOLS_PACKAGE_DIR}/All
			EOF
		else
			cat >>${TOOLS_BASEDIR}/etc/pkg_install.conf <<-EOF
				PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${TOOLS_PACKAGE_DIR}/All;http://${REMOTE_PACKAGE_URL}/${TOOLS_PACKAGE_DIR}/All
			EOF
		fi
		${TOOLS_BASEDIR}/sbin/pkg_add ${tools_packages} >/dev/null 2>&1
	"
fi
