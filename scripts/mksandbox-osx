#!/bin/bash
#
# Create a shadowed sandbox from the root file system ready for builds.
#

if [ $# -eq 1 ]; then
	chrootdir=$1; shift
	chrootname=$(basename ${chrootdir})
else
	echo "usage: $0 <chrootdir>" >&2
	exit 2
fi

while true; do
	if [ -d ${chrootdir} ]; then
		#echo "${chrootdir} already exists, retrying or ^C" >&2
		sleep 5
	else
		break
	fi
done

# Calculate pkgbuild based on chroot name.
pkgbuild=${chrootname#bootstrap-pbulk-}
pkgbuild=${pkgbuild#bootstrap-}
pkgbuild=${pkgbuild#dev-}
pkgbuild=${pkgbuild#pkgsrc-}
pkgbuild=${pkgbuild%%-build}
pkgbuild=${pkgbuild%%-scan}
pkgbuild=${pkgbuild%%-build-*}
pkgbuild=${pkgbuild%%-scan-*}

# Load per-pkgbuild configuration.
if [ ! -f $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf ]; then
	echo "Couldn't determine pkgbuild from ${chrootdir}" >&2
	exit 1
fi
. $(dirname $0)/../conf/${pkgbuild}/pkgbuild.conf

# Figure out where / is mounted
rootdev=$(df -l / | awk '$NF == "/" {print $1}')
if [ -z "${rootdev}" ]; then
	echo "Couldn't determine root device, are you inside a chroot?" >&2
	exit 1
fi

mkdir -p ${SHADOW_BASEDIR}
chrootdev=$(hdiutil attach \
    -shadow ${SHADOW_BASEDIR}/${chrootname}.shadow \
    -mountpoint ${chrootdir} \
    -noverify -private ${rootdev} | awk '{print $1}')
mount -u -o noatime,nobrowse,nodev,nosuid ${chrootdev}
echo ${chrootdev} >${SHADOW_BASEDIR}/${chrootname}.dev

mount_devfs devfs ${chrootdir}/dev

for mount in ${NFS_MOUNTS}; do
	src=${mount%=*}
	dst=${mount#*=}
	mkdir -p ${chrootdir}${dst}
	mount_nfs ${src} ${chrootdir}${dst}
done

for mount in ${TMPFS_MOUNTS}; do
	mnt=${mount%=*}
	size=${mount#*=}
	rm -f ${chrootdir}${mnt}
	mkdir -p ${chrootdir}${mnt}
	rd=$(hdid -nomount ram://$((${size} * 1024 * 2)))
	newfs_hfs -s ${rd} >/dev/null
	mount_hfs -o noatime,nobrowse ${rd} ${chrootdir}${mnt}
	echo ${rd} >>${SHADOW_BASEDIR}/${chrootname}.ramfs
done

# If /tmp is a tmpfs, we want to share it with /var/tmp
chmod 1777 ${chrootdir}/tmp
rm -rf ${chrootdir}/var/tmp
ln -s /tmp ${chrootdir}/var/tmp

# Symlink various high-IO VARBASE things to tmpfs.
rm -rf ${chrootdir}/var/cache
mkdir -p ${chrootdir}/tmp/var_cache
ln -s /tmp/var_cache ${chrootdir}/var/cache
rm -rf ${chrootdir}/var/lib/texmf
mkdir -p ${chrootdir}/tmp/var_lib_texmf
ln -s /tmp/var_lib_texmf ${chrootdir}/var/lib/texmf
mv ${chrootdir}/var/folders ${chrootdir}/var/folders.sys
mkdir -p ${chrootdir}/tmp/folders
ln -s /tmp/folders ${chrootdir}/var/folders

# XXX
chown pbulk ${chrootdir}/Users/pbulk/build 2>/dev/null
tmpdir=$(su - pbulk -c 'dirname $(getconf DARWIN_USER_TEMP_DIR) | sed -e "s,^/var,/tmp,"')
if [ -n "${tmpdir}" ]; then
	mkdir -p ${chrootdir}${tmpdir}
	chown pbulk:staff ${chrootdir}${tmpdir}
fi

#
# Enable DNS resolution via an mDNSResponder socket
#
PB="/usr/libexec/PlistBuddy"
PLIST="/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist"
ENTRY="Sockets:Listeners"
while true; do
	# Ensure only one process updates the plist at a time.
	mkdir /tmp/updatemdns.lock 2>/dev/null
	if [ $? -ne 0 ]; then
		sleep 1
		continue
	fi
	# Ensure Sockets:Listeners is an array.
	${PB} -c "Print ${ENTRY}:0" ${PLIST} >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		tmplist="/tmp/import.$$.plist"
		${PB} -x -c "Print ${ENTRY}" ${PLIST} >${tmplist}
		${PB} -c "Delete ${ENTRY}" ${PLIST}
		${PB} -c "Add ${ENTRY} array" ${PLIST}
		${PB} -c "Add ${ENTRY}:0 dict" ${PLIST}
		${PB} -c "Merge ${tmplist} ${ENTRY}:0" ${PLIST}
		rm -f ${tmplist}
	fi
	addlist="/tmp/add.$$.plist"
	cat >${addlist} <<-EOF
	<array>
		<dict>
			<key>SockFamily</key>
			<string>Unix</string>
			<key>SockPathName</key>
			<string>${chrootdir}/var/run/mDNSResponder</string>
			<key>SockPathMode</key>
			<integer>438</integer>
		</dict>
	</array>
	EOF
	${PB} -c "Merge ${addlist} ${ENTRY}" ${PLIST}
	rm -f ${addlist}
	launchctl unload ${PLIST}
	launchctl load -w ${PLIST}
	rm -rf /tmp/updatemdns.lock
	break
done

#
# Unpack tools bootstrap and install required packages for building.
#
if [ -n "${TOOLS_BOOTSTRAP}" ]; then
	tools_packages="nbpatch pbulk"
	case "${chrootname}" in
	*-build*|*-bootstrap*)
		tools_packages="${tools_packages} gnupg"
		;;
	*-scan*)
		;;
	*)
		tools_packages="${tools_packages} gnupg nodejs"
		;;
	esac
	/usr/sbin/chroot ${chrootdir} /bin/bash -c "
		${TAR} -zxf ${LOCAL_PACKAGE_BASEDIR}/${BOOTSTRAP_PBULK_DIR}/${TOOLS_BOOTSTRAP} -C /
		if [ ${USE_LOCAL_PKG_PATH} = yes ]; then
			cat >>${TOOLS_BASEDIR}/etc/pkg_install.conf <<-EOF
				PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${TOOLS_PACKAGE_DIR}/All
			EOF
		else
			cat >>${TOOLS_BASEDIR}/etc/pkg_install.conf <<-EOF
				PKG_PATH=${LOCAL_PACKAGE_BASEDIR}/${TOOLS_PACKAGE_DIR}/All;${REMOTE_PACKAGE_URL}/${TOOLS_PACKAGE_DIR}/All
			EOF
		fi
		${TOOLS_BASEDIR}/sbin/pkg_add ${tools_packages} >/dev/null 2>&1
	"
fi
